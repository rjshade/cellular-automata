// Generated by CoffeeScript 1.8.0
(function() {
  var Conway,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Conway = (function() {
    Conway.prototype.board = null;

    Conway.prototype.tickLength = 500;

    Conway.prototype.rows = null;

    Conway.prototype.cols = null;

    function Conway(dims) {
      this.tick = __bind(this.tick, this);
      this.board = new GameBoard(dims, "conway");
      this.rows = this.board.getNumRows();
      this.cols = this.board.getNumCols();
      this.seed();
      this.tick();
    }

    Conway.prototype.seed = function() {
      var col, rnd, row, _i, _ref, _results;
      _results = [];
      for (row = _i = 0, _ref = this.rows; 0 <= _ref ? _i < _ref : _i > _ref; row = 0 <= _ref ? ++_i : --_i) {
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (col = _j = 0, _ref1 = this.cols; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; col = 0 <= _ref1 ? ++_j : --_j) {
            rnd = Math.random();
            if (rnd > 0.7) {
              _results1.push(this.board.setCellState(row, col, 1));
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Conway.prototype.tick = function() {
      this.board.drawGrid();
      this.evolve();
      return setTimeout(this.tick, this.tickLength);
    };

    Conway.prototype.evolve = function() {
      var col, curState, nei, newCellStates, row, _i, _j, _ref, _ref1;
      newCellStates = [];
      for (row = _i = 0, _ref = this.rows; 0 <= _ref ? _i < _ref : _i > _ref; row = 0 <= _ref ? ++_i : --_i) {
        newCellStates[row] = [];
        for (col = _j = 0, _ref1 = this.cols; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; col = 0 <= _ref1 ? ++_j : --_j) {
          curState = this.board.getCellState(row, col);
          nei = this.countNeighbours(row, col);
          if (nei > 3 || nei < 2) {
            newCellStates[row][col] = 0;
          } else if (nei === 3) {
            newCellStates[row][col] = 1;
          } else {
            newCellStates[row][col] = curState;
          }
        }
      }
      return this.board.updateCellStates(newCellStates);
    };

    Conway.prototype.cellAlive = function(row, col) {
      return this.board.getCellState(row, col) === 1;
    };

    Conway.prototype.countNeighbours = function(row, col) {
      var col_high, col_low, count, row_high, row_low;
      count = 0;
      row_low = row - 1;
      row_high = row + 1;
      col_low = col - 1;
      col_high = col + 1;
      if (row_low < 0) {
        row_low = this.rows - 1;
      }
      if (row_high >= this.rows) {
        row_high = 0;
      }
      if (col_low < 0) {
        col_low = this.cols - 1;
      }
      if (col_high >= this.cols) {
        col_high = 0;
      }
      if (this.cellAlive(row_low, col_low)) {
        count++;
      }
      if (this.cellAlive(row_low, col)) {
        count++;
      }
      if (this.cellAlive(row_low, col_high)) {
        count++;
      }
      if (this.cellAlive(row, col_low)) {
        count++;
      }
      if (this.cellAlive(row, col_high)) {
        count++;
      }
      if (this.cellAlive(row_high, col_low)) {
        count++;
      }
      if (this.cellAlive(row_high, col)) {
        count++;
      }
      if (this.cellAlive(row_high, col_high)) {
        count++;
      }
      return count;
    };

    return Conway;

  })();

  window.Conway = Conway;

}).call(this);
