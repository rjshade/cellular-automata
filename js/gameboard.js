// Generated by CoffeeScript 1.3.3
(function() {
  var GameBoard;

  GameBoard = (function() {

    GameBoard.prototype.size = null;

    GameBoard.prototype.rows = null;

    GameBoard.prototype.cols = null;

    GameBoard.prototype.cellStates = null;

    GameBoard.prototype.canvas = null;

    GameBoard.prototype.ctx = null;

    function GameBoard(rows, cols, size) {
      if (rows == null) {
        rows = 50;
      }
      if (cols == null) {
        cols = 50;
      }
      if (size == null) {
        size = 10;
      }
      this.rows = rows;
      this.cols = cols;
      this.size = size;
      this.buildCanvas();
      this.createGrid();
      this.drawGrid();
    }

    GameBoard.prototype.buildCanvas = function() {
      this.canvas = document.createElement('canvas');
      $(this.canvas).addClass('gameboard');
      $('.cellular-automata').append(this.canvas);
      this.canvas.height = this.size * this.rows;
      this.canvas.width = this.size * this.cols;
      return this.ctx = this.canvas.getContext('2d');
    };

    GameBoard.prototype.createGrid = function() {
      var col, row, _i, _j, _ref, _ref1;
      this.cellStates = [];
      for (row = _i = 0, _ref = this.rows; 0 <= _ref ? _i < _ref : _i > _ref; row = 0 <= _ref ? ++_i : --_i) {
        this.cellStates[row] = [];
        for (col = _j = 0, _ref1 = this.cols; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; col = 0 <= _ref1 ? ++_j : --_j) {
          this.cellStates[row][col] = 0;
        }
      }
      return this.cellStates;
    };

    GameBoard.prototype.drawGrid = function() {
      var col, row, _i, _ref, _results;
      _results = [];
      for (row = _i = 0, _ref = this.rows; 0 <= _ref ? _i < _ref : _i > _ref; row = 0 <= _ref ? ++_i : --_i) {
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (col = _j = 0, _ref1 = this.cols; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; col = 0 <= _ref1 ? ++_j : --_j) {
            _results1.push(this.drawCell(row, col));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    GameBoard.prototype.drawCell = function(row, col) {
      var fillStyle, x, y;
      x = col * this.size;
      y = row * this.size;
      this.ctx.strokeStyle = 'rgba(50, 50, 50, 0.1)';
      this.ctx.strokeRect(x, y, this.size, this.size);
      if (this.cellStates[row][col] === 0) {
        fillStyle = 'rgb(255, 255, 255)';
      } else {
        fillStyle = 'rgb(50, 50, 50)';
      }
      this.ctx.fillStyle = fillStyle;
      return this.ctx.fillRect(x, y, this.size, this.size);
    };

    GameBoard.prototype.setCellState = function(row, col, val) {
      this.cellStates[row][col] = val;
      return this.drawCell(row, col);
    };

    GameBoard.prototype.getCellState = function(row, col) {
      return this.cellStates[row][col];
    };

    GameBoard.prototype.getNumRows = function() {
      return this.rows;
    };

    GameBoard.prototype.getNumCols = function() {
      return this.cols;
    };

    GameBoard.prototype.updateCellStates = function(newCellStates) {
      var col, row, _i, _ref, _results;
      _results = [];
      for (row = _i = 0, _ref = this.rows; 0 <= _ref ? _i < _ref : _i > _ref; row = 0 <= _ref ? ++_i : --_i) {
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (col = _j = 0, _ref1 = this.cols; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; col = 0 <= _ref1 ? ++_j : --_j) {
            _results1.push(this.setCellState(row, col, newCellStates[row][col]));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    return GameBoard;

  })();

  window.GameBoard = GameBoard;

}).call(this);
