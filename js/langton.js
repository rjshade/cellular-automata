// Generated by CoffeeScript 1.3.3
(function() {
  var Ant, Langton,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Ant = (function() {

    Ant.prototype.row = 5;

    Ant.prototype.col = 5;

    Ant.prototype.direction = [1, 0];

    function Ant(row, col) {
      this.row = row;
      this.col = col;
    }

    Ant.prototype.turnLeft = function() {
      var prev;
      prev = this.direction;
      if (this.direction[0] === 1 && this.direction[1] === 0) {
        return this.direction = [0, 1];
      } else if (this.direction[0] === 0 && this.direction[1] === 1) {
        return this.direction = [-1, 0];
      } else if (this.direction[0] === -1 && this.direction[1] === 0) {
        return this.direction = [0, -1];
      } else if (this.direction[0] === 0 && this.direction[1] === -1) {
        return this.direction = [1, 0];
      }
    };

    Ant.prototype.turnRight = function() {
      var prev;
      prev = this.direction;
      if (this.direction[0] === 1 && this.direction[1] === 0) {
        return this.direction = [0, -1];
      } else if (this.direction[0] === 0 && this.direction[1] === -1) {
        return this.direction = [-1, 0];
      } else if (this.direction[0] === -1 && this.direction[1] === 0) {
        return this.direction = [0, 1];
      } else if (this.direction[0] === 0 && this.direction[1] === 1) {
        return this.direction = [1, 0];
      }
    };

    Ant.prototype.moveForwards = function() {
      this.row += this.direction[0];
      return this.col += this.direction[1];
    };

    return Ant;

  })();

  Langton = (function() {

    Langton.prototype.board = null;

    Langton.prototype.tickLength = 100;

    Langton.prototype.ant = null;

    function Langton() {
      this.tick = __bind(this.tick, this);
      this.board = new GameBoard();
      this.ant = new Ant(25, 25);
      this.tick();
    }

    Langton.prototype.tick = function() {
      this.board.drawGrid();
      this.evolve();
      return setTimeout(this.tick, this.tickLength);
    };

    Langton.prototype.drawAnt = function() {
      return this.board.setCellState(this.ant.row, this.ant.col, 0);
    };

    Langton.prototype.evolve = function() {
      var col, row, state;
      row = this.ant.row;
      col = this.ant.col;
      state = this.board.getCellState(row, col);
      if (state === 1) {
        this.board.setCellState(row, col, 0);
        this.ant.turnRight();
      } else if (state === 0) {
        this.board.setCellState(row, col, 1);
        this.ant.turnLeft();
      }
      return this.ant.moveForwards();
    };

    return Langton;

  })();

  window.Langton = Langton;

}).call(this);
