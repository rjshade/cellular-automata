// Generated by CoffeeScript 1.3.3
(function() {
  var Langton,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Langton = (function() {
    var Ant;

    Ant = (function() {

      Ant.prototype.row = 5;

      Ant.prototype.col = 5;

      Ant.prototype.direction = [1, 0];

      function Ant(row, col) {
        this.row = row;
        this.col = col;
      }

      Ant.prototype.turnLeft = function() {
        var prev;
        prev = this.direction;
        if (this.direction[0] === 1 && this.direction[1] === 0) {
          return this.direction = [0, 1];
        } else if (this.direction[0] === 0 && this.direction[1] === 1) {
          return this.direction = [-1, 0];
        } else if (this.direction[0] === -1 && this.direction[1] === 0) {
          return this.direction = [0, -1];
        } else if (this.direction[0] === 0 && this.direction[1] === -1) {
          return this.direction = [1, 0];
        }
      };

      Ant.prototype.turnRight = function() {
        var prev;
        prev = this.direction;
        if (this.direction[0] === 1 && this.direction[1] === 0) {
          return this.direction = [0, -1];
        } else if (this.direction[0] === 0 && this.direction[1] === -1) {
          return this.direction = [-1, 0];
        } else if (this.direction[0] === -1 && this.direction[1] === 0) {
          return this.direction = [0, 1];
        } else if (this.direction[0] === 0 && this.direction[1] === 1) {
          return this.direction = [1, 0];
        }
      };

      Ant.prototype.moveForwards = function() {
        this.row += this.direction[0];
        return this.col += this.direction[1];
      };

      Ant.prototype.wrapPosition = function(rows, cols) {
        if (this.row < 0) {
          this.row = rows - 1;
        }
        if (this.row >= rows) {
          this.row = 0;
        }
        if (this.col < 0) {
          this.col = cols - 1;
        }
        if (this.col >= cols) {
          return this.col = 0;
        }
      };

      return Ant;

    })();

    Langton.prototype.board = null;

    Langton.prototype.tickLength = 100;

    Langton.prototype.ant = null;

    function Langton(dims) {
      this.tick = __bind(this.tick, this);
      this.board = new GameBoard(dims);
      this.ant = new Ant(Math.floor(dims.rows / 2), Math.floor(dims.cols / 2));
      this.tick();
    }

    Langton.prototype.tick = function() {
      this.board.drawGrid();
      this.evolve();
      return setTimeout(this.tick, this.tickLength);
    };

    Langton.prototype.drawAnt = function() {
      return this.board.setCellState(this.ant.row, this.ant.col, 0);
    };

    Langton.prototype.evolve = function() {
      var col, row, state;
      row = this.ant.row;
      col = this.ant.col;
      state = this.board.getCellState(row, col);
      if (state === 1) {
        this.board.setCellState(row, col, 0);
        this.ant.turnRight();
      } else if (state === 0) {
        this.board.setCellState(row, col, 1);
        this.ant.turnLeft();
      }
      return this.moveAntForwards();
    };

    Langton.prototype.moveAntForwards = function() {
      this.ant.moveForwards();
      return this.ant.wrapPosition(this.board.getNumRows(), this.board.getNumCols());
    };

    return Langton;

  })();

  window.Langton = Langton;

}).call(this);
